#include <iostream>
#include <map>

using U64 = unsigned long long;

//Masking constants
const U64 NOT_A_FILE = 18374403900871474942ULL;
const U64 NOT_AB_FILE = 18229723555195321596ULL;
const U64 NOT_H_FILE = 9187201950435737471ULL;
const U64 NOT_HG_FILE = 4557430888798830399ULL;

//Relevant bit constants
const int BISHOP_RELEVANT_BITS[64] = {
    6, 5, 5, 5, 5, 5, 5, 6, 
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 6,
};
const int ROOK_RELEVANT_BITS[64] = {
    12, 11, 11, 11, 11, 11, 11, 12, 
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    12, 11, 11, 11, 11, 11, 11, 12
};

//squareIndex -> square
const char *pSQUARE_INDEX_TO_COORDINATES[64] = {
    "a8", "b8", "c8", "d8", "e8", "f8", "g8", "h8",
    "a7", "b7", "c7", "d7", "e7", "f7", "g7", "h7",
    "a6", "b6", "c6", "d6", "e6", "f6", "g6", "h6",
    "a5", "b5", "c5", "d5", "e5", "f5", "g5", "h5",
    "a4", "b4", "c4", "d4", "e4", "f4", "g4", "h4",
    "a3", "b3", "c3", "d3", "e3", "f3", "g3", "h3",
    "a2", "b2", "c2", "d2", "e2", "f2", "g2", "h2",
    "a1", "b1", "c1", "d1", "e1", "f1", "g1", "h1"
};

const int CASTLE_STATE[64] = {
    7, 15, 15, 15, 3, 15, 15, 11,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    13, 15, 15, 15, 12, 15, 15, 14,
};

const int NO_SQUARE_INDEX = -1;
const int NO_SIDE_TO_MOVE = -1;

//!TECHNIQUE-B: Dictionaries
std::map<char, int> ASCII_TO_PIECE_INDEX = {
    {'P', 0},
    {'N', 1},
    {'B', 2},
    {'R', 3},
    {'Q', 4},
    {'K', 5},
    {'p', 6},
    {'n', 7},
    {'b', 8},
    {'r', 9},
    {'q', 10},
    {'k', 11}
};

//!TECHNIQUE-B: Dictionaries
std::map<int, char> PIECE_INDEX_TO_ASCII = {
    {0, 'P'},
    {1, 'N'},
    {2, 'B'},
    {3, 'R'},
    {4, 'Q'},
    {5, 'K'},
    {6, 'p'},
    {7, 'n'},
    {8, 'b'},
    {9, 'r'},
    {10, 'q'},
    {11, 'k'}
};

const std::string START_POSITION_FEN = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
const std::string TEST_POSITIONS_FEN[3]{
    "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1",
    "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - 0 1",
    "r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1"
};

const int MATERIAL_SCORE[12] = {
    100,
    300,
    350,
    525,
    1000,
    10000,
    -100,
    -300,
    -350,
    -525,
    -1000,
    -10000
};

const int PAWN_SCORE[64] = {
    90,  90,  90,  90,  90,  90,  90,  90,
    30,  30,  30,  40,  40,  30,  30,  30,
    20,  20,  20,  30,  30,  20,  20,  20,
    10,  10,  10,  25,  25,  10,  10,  10,
     5,   0,   0,  20,  20,   0,   0,   5,
     0,   0,   0,   5,   5,   0,   0,   0,
     0,   0,   0, -10, -10,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0
};

const int KNIGHT_SCORE[64] = {
    -5,   0,   0,   0,   0,   0,   0,  -5,
    -5,   0,  10,  10,  10,  10,   0,  -5,
    -5,   5,  10,  10,  10,  10,   5,  -5,
    -5,   5,  10,  15,  15,  10,   5,  -5,
    -5,   5,  10,  15,  15,  10,   5,  -5,
     0,   0,  15,  10,  10,  15,   0,   0,
    -5,   0,   0,  10,  10,   0,   0,  -5,
    -5,  -5,   0,   0,   0,   0,  -5,  -5
};

const int BISHOP_SCORE[64] = {
    0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,  10,  10,   0,   0,   0,
    0,  15,  10,  10,  10,  10,  15,   0,
    0,   0,  15,  10,  10,  15,   0,   0,
    0,   5,   0,  10,  10,   0,   5,   0,
    0,  10,   0,   0,   0,   0,  10,   0,
    0,   0,  -5,   0,   0,  -5,   0,   0

};

const int ROOK_SCORE[64] = {
    50,  50,  50,  50,  50,  50,  50,  50,
    50,  50,  50,  50,  50,  50,  50,  50,
     0,   0,  10,  20,  20,  10,   0,   0,
     0,   0,  10,  20,  20,  10,   0,   0,
     0,   0,  10,  20,  20,  10,   0,   0,
     0,   0,  10,  20,  20,  10,   0,   0,
     0,   0,  10,  20,  20,  10,   0,   0,
     0,   0,   0,  20,  20,   0,   0,   0

};

const int KING_SCORE[64] = {
    0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   5,   5,   5,   5,   0,   0,
    0,   5,   5,  10,  10,   5,   5,   0,
    0,   5,  10,  20,  20,  10,   5,   0,
    0,   5,  10,  20,  20,  10,   5,   0,
    0,   0,   5,  10,  10,   5,   0,   0,
    0,   5,   5,  -5,  -5,   0,   5,   0,
    0,   0,   5,   0,  -5,   0,  10,   0
};


const int CHECKMATE_SCORE = -49000;
const int STALEMATE_SCORE = 0;

const int MVV_LVA[12][12] =  {
 	105, 205, 305, 405, 505, 605,  105, 205, 305, 405, 505, 605,
	104, 204, 304, 404, 504, 604,  104, 204, 304, 404, 504, 604,
	103, 203, 303, 403, 503, 603,  103, 203, 303, 403, 503, 603,
	102, 202, 302, 402, 502, 602,  102, 202, 302, 402, 502, 602,
	101, 201, 301, 401, 501, 601,  101, 201, 301, 401, 501, 601,
	100, 200, 300, 400, 500, 600,  100, 200, 300, 400, 500, 600,

	105, 205, 305, 405, 505, 605,  105, 205, 305, 405, 505, 605,
	104, 204, 304, 404, 504, 604,  104, 204, 304, 404, 504, 604,
	103, 203, 303, 403, 503, 603,  103, 203, 303, 403, 503, 603,
	102, 202, 302, 402, 502, 602,  102, 202, 302, 402, 502, 602,
	101, 201, 301, 401, 501, 601,  101, 201, 301, 401, 501, 601,
	100, 200, 300, 400, 500, 600,  100, 200, 300, 400, 500, 600
};

const int MAX_SEARCH_DEPTH = 64;
const int FULL_DEPTH_MOVES = 4;
const int REDUCTION_LIMIT = 3;
const int ASPIRATION_WINDOW = 50;
