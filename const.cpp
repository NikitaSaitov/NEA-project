#include <iostream>
#include <map>

using U64 = unsigned long long;

//Masking constants
const U64 NOT_A_FILE = 18374403900871474942ULL;
const U64 NOT_AB_FILE = 18229723555195321596ULL;
const U64 NOT_H_FILE = 9187201950435737471ULL;
const U64 NOT_HG_FILE = 4557430888798830399ULL;

//Relevant bit constants
const int BISHOP_RELEVANT_BITS[64] = {
    6, 5, 5, 5, 5, 5, 5, 6, 
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 6,
};
const int ROOK_RELEVANT_BITS[64] = {
    12, 11, 11, 11, 11, 11, 11, 12, 
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    12, 11, 11, 11, 11, 11, 11, 12
};

//Magic number constants
const U64 BISHOP_MAGIC_NUMBERS[64]{
    4506082252816400ULL,
    288837315361521729ULL,
    148619896075321344ULL,
    290523975660864512ULL,
    81364135601773056ULL,
    1297336069151261732ULL,
    1130302316635136ULL,
    360323747276668928ULL,
    1152928170664665216ULL,
    22007548347684ULL,
    217303153383703714ULL,
    4468141728768ULL,
    144116357381226566ULL,
    1408492112331328ULL,
    8214566029629606404ULL,
    2252079054717442ULL,
    146419902434246788ULL,
    3611887107385135176ULL,
    2252091875660289ULL,
    4612811953771907104ULL,
    1482249443579004032ULL,
    90107237058480145ULL,
    37154835775228160ULL,
    44332671371284ULL,
    578722723138633984ULL,
    157741435746521216ULL,
    144414256060711424ULL,
    6933300422432129056ULL,
    281544249851936ULL,
    4611969696739115264ULL,
    10698265329144068ULL,
    90177150189824ULL,
    2346384494012990472ULL,
    145245611657138200ULL,
    289145350219891717ULL,
    585472366801846800ULL,
    18015498327359552ULL,
    567382531702912ULL,
    4612820750449377576ULL,
    577024398041612353ULL,
    4761448306948706304ULL,
    23089748612744192ULL,
    18085042676969478ULL,
    144679255005992961ULL,
    18084836116009220ULL,
    1189249373087728128ULL,
    13511924767531652ULL,
    600760320056639616ULL,
    1130302316635136ULL,
    1450229741084213281ULL,
    162129878710485504ULL,
    146369191552221184ULL,
    74974057596928ULL,
    74974057596928ULL,
    2260630275105024ULL,
    288837315361521729ULL,
    360323747276668928ULL,
    2252079054717442ULL,
    9044600719673344ULL,
    800515040469058560ULL,
    3026419499786054656ULL,
    9007216507490832ULL,
    1152928170664665216ULL,
    4506082252816400ULL
};
const U64 ROOK_MAGIC_NUMBERS[64]{
    180145635977069072ULL,
    4917935259856666688ULL,
    1801448716851224578ULL,
    72062035302555904ULL,
    4755810071349298208ULL,
    1765412704337527296ULL,
    1477198819769716224ULL,
    4647715915002560640ULL,
    2306406100905361536ULL,
    70643624185856ULL,
    281544233910336ULL,
    2882585305215467528ULL,
    38843684527044652ULL,
    154529856770541824ULL,
    37154714240942593ULL,
    2324701841251649792ULL,
    8106517262426456064ULL,
    4506074065420288ULL,
    2378191974369869840ULL,
    364792669597663264ULL,
    4900484842224943472ULL,
    13793373437560834ULL,
    1188989885671936008ULL,
    4611969692436531273ULL,
    36029072970620928ULL,
    18031991232407552ULL,
    35188668170304ULL,
    4785216339050506ULL,
    863120923035648ULL,
    4612813018923794944ULL,
    36301068963912ULL,
    1126458252656724ULL,
    2459035817373335680ULL,
    1152956690090430466ULL,
    45071216096055552ULL,
    1152956757715193088ULL,
    77124830914154504ULL,
    2814766980532496ULL,
    290490980715462928ULL,
    8070451083111043364ULL,
    792915560257159200ULL,
    792915560257159200ULL,
    5260521025241808912ULL,
    292171060458160160ULL,
    308496608918568976ULL,
    1157706596390993928ULL,
    594563670223355905ULL,
    4504150473834500ULL,
    738872097341710848ULL,
    35253095760448ULL,
    45071216096055552ULL,
    281509604893440ULL,
    2306124759613575170ULL,
    9288708625006848ULL,
    5146332912288768ULL,
    290517652403716608ULL,
    2452228139047256129ULL,
    36319214121914498ULL,
    9605781355762178ULL,
    2307531996785543174ULL,
    1153484471876456450ULL,
    2307813368446844937ULL,
    563534337540356ULL,
    578734009790506054ULL
};

//squareIndex -> square
const char *pSQUARE_INDEX_TO_COORDINATES[64] = {
    "a8", "b8", "c8", "d8", "e8", "f8", "g8", "h8",
    "a7", "b7", "c7", "d7", "e7", "f7", "g7", "h7",
    "a6", "b6", "c6", "d6", "e6", "f6", "g6", "h6",
    "a5", "b5", "c5", "d5", "e5", "f5", "g5", "h5",
    "a4", "b4", "c4", "d4", "e4", "f4", "g4", "h4",
    "a3", "b3", "c3", "d3", "e3", "f3", "g3", "h3",
    "a2", "b2", "c2", "d2", "e2", "f2", "g2", "h2",
    "a1", "b1", "c1", "d1", "e1", "f1", "g1", "h1"
};
const int CASTLE_STATE[64] = {
    7, 15, 15, 15, 3, 15, 15, 11,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    13, 15, 15, 15, 12, 15, 15, 14,
};

const int NO_SQUARE_INDEX = -1;
const int NO_SIDE_TO_MOVE = -1;

//!TECHNIQUE-B: Dictionaries
std::map<char, int> ASCII_TO_PIECE_INDEX = {
    {'P', 0},
    {'N', 1},
    {'B', 2},
    {'R', 3},
    {'Q', 4},
    {'K', 5},
    {'p', 6},
    {'n', 7},
    {'b', 8},
    {'r', 9},
    {'q', 10},
    {'k', 11}
};

//!TECHNIQUE-B: Dictionaries
std::map<int, char> PIECE_INDEX_TO_ASCII = {
    {0, 'P'},
    {1, 'N'},
    {2, 'B'},
    {3, 'R'},
    {4, 'Q'},
    {5, 'K'},
    {6, 'p'},
    {7, 'n'},
    {8, 'b'},
    {9, 'r'},
    {10, 'q'},
    {11, 'k'}
};

const std::string START_POSITION_FEN = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
const std::string TEST_POSITIONS_FEN[3]{
    "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1",
    "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - 0 1",
    "r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1"
};

const int MATERIAL_SCORE[12] = {
    100,
    300,
    350,
    525,
    1000,
    10000,
    -100,
    -300,
    -350,
    -525,
    -1000,
    -10000
};

const int PAWN_SCORE[64] = {
    90,  90,  90,  90,  90,  90,  90,  90,
    30,  30,  30,  40,  40,  30,  30,  30,
    20,  20,  20,  30,  30,  20,  20,  20,
    10,  10,  10,  25,  25,  10,  10,  10,
     5,   0,   0,  20,  20,   0,   0,   5,
     0,   0,   0,   5,   5,   0,   0,   0,
     0,   0,   0, -10, -10,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0
};

const int KNIGHT_SCORE[64] = {
    -5,   0,   0,   0,   0,   0,   0,  -5,
    -5,   0,  10,  10,  10,  10,   0,  -5,
    -5,   5,  10,  10,  10,  10,   5,  -5,
    -5,   5,  10,  15,  15,  10,   5,  -5,
    -5,   5,  10,  15,  15,  10,   5,  -5,
     0,   0,  15,  10,  10,  15,   0,   0,
    -5,   0,   0,  10,  10,   0,   0,  -5,
    -5,  -5,   0,   0,   0,   0,  -5,  -5
};

const int BISHOP_SCORE[64] = {
    0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,  10,  10,   0,   0,   0,
    0,  15,  10,  10,  10,  10,  15,   0,
    0,   0,  15,  10,  10,  15,   0,   0,
    0,   5,   0,  10,  10,   0,   5,   0,
    0,  10,   0,   0,   0,   0,  10,   0,
    0,   0,  -5,   0,   0,  -5,   0,   0

};

const int ROOK_SCORE[64] = {
    50,  50,  50,  50,  50,  50,  50,  50,
    50,  50,  50,  50,  50,  50,  50,  50,
     0,   0,  10,  20,  20,  10,   0,   0,
     0,   0,  10,  20,  20,  10,   0,   0,
     0,   0,  10,  20,  20,  10,   0,   0,
     0,   0,  10,  20,  20,  10,   0,   0,
     0,   0,  10,  20,  20,  10,   0,   0,
     0,   0,   0,  20,  20,   0,   0,   0

};

const int KING_SCORE[64] = {
    0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   5,   5,   5,   5,   0,   0,
    0,   5,   5,  10,  10,   5,   5,   0,
    0,   5,  10,  20,  20,  10,   5,   0,
    0,   5,  10,  20,  20,  10,   5,   0,
    0,   0,   5,  10,  10,   5,   0,   0,
    0,   5,   5,  -5,  -5,   0,   5,   0,
    0,   0,   5,   0,  -5,   0,  10,   0
};


const int CHECKMATE_SCORE = -49000;
const int STALEMATE_SCORE = 0;

const int MVV_LVA[12][12] =  {
 	105, 205, 305, 405, 505, 605,  105, 205, 305, 405, 505, 605,
	104, 204, 304, 404, 504, 604,  104, 204, 304, 404, 504, 604,
	103, 203, 303, 403, 503, 603,  103, 203, 303, 403, 503, 603,
	102, 202, 302, 402, 502, 602,  102, 202, 302, 402, 502, 602,
	101, 201, 301, 401, 501, 601,  101, 201, 301, 401, 501, 601,
	100, 200, 300, 400, 500, 600,  100, 200, 300, 400, 500, 600,

	105, 205, 305, 405, 505, 605,  105, 205, 305, 405, 505, 605,
	104, 204, 304, 404, 504, 604,  104, 204, 304, 404, 504, 604,
	103, 203, 303, 403, 503, 603,  103, 203, 303, 403, 503, 603,
	102, 202, 302, 402, 502, 602,  102, 202, 302, 402, 502, 602,
	101, 201, 301, 401, 501, 601,  101, 201, 301, 401, 501, 601,
	100, 200, 300, 400, 500, 600,  100, 200, 300, 400, 500, 600
};

const int MAX_SEARCH_DEPTH = 64;
const int FULL_DEPTH_MOVES = 4;
const int REDUCTION_LIMIT = 3;
const int ASPIRATION_WINDOW = 50;
